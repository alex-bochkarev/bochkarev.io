#+hugo_base_dir: ~/projects/bochkarev.io

# hugo_section is a folder inside 'content'
#+hugo_section: notes
#+hugo_auto_set_lastmod: t
#+hugo_front_matter_format: yaml

#+title: My programming stack

#+date: 2021-09-27
#+author: admin

#+hugo_categories: notes

#+begin_src yaml :front_matter_extra t
summary: A brief summary of the core software stack I use for research.

links:
- icon: "i-gh"
  name: "dotfiles"
  url: "https://github.com/alex-bochkarev/dotfiles"
- icon: "i-gh"
  name: "(Space-) Emacs config"
  url: "https://github.com/alex-bochkarev/my-spacemacs-dotfiles"
#+end_src

# available links are: i-envelope, i-twitter, i-tg, i-key, i-keybase, i-gh,
# i-wiki, i-outside, i-date, hamburger, i-pdf, i-heart, i-ipynb

I am not a software engineer, but we do a lot of programming and computational
work in OR/IE. I like to have a GNU/Linux system as a basis, and on top of that:
- For [[/research/][research]], quick prototyping, and teaching illustrations I have been mostly using python (example [[/research/align-BDD/code-docs/overview.html][code docs]]) and, more recently, [[https://julialang.org/][Julia]]. Conceptually, I am pretty comfortable with OOP, but have limited exposure to FP.
- I really like R/[[https://ggplot2.tidyverse.org/][ggplot]]/[[https://www.tidyverse.org/][tidyverse]] in general for quick visualization and exploratory data analysis (see code [[https://github.com/alex-bochkarev/dotplot-gen][example]]),
- For high performance computing I use a comp cluster with Portable Batch System (PBS) along with =bash= and =make= as a "glue" in my computing (see a small [[https://github.com/alex-bochkarev/tgs-curl][example]] and related [[/tools/cluster-msg/][note]]).
- For a high-performance code, besides Julia, I would go with C++ or Java. (My last experience involved implementing [[https://en.wikipedia.org/wiki/Ellipsoid_method][Ellipsoid method]] for LPs as a @@html:
  <a href="https://github.com/alex-bochkarev/MATH8100_Project">course project</a>@@.)
- I don't really like Jupyter notebooks due to complicated version control, but I must admit it might be handy, and I had some success with it for [[/teaching/][teaching]] (e.g., see [[https://nbviewer.jupyter.org/github/alex-bochkarev/Algo-SMTB-2021/blob/main/T1-2-Algorithms.ipynb][notebook/lecture example]])

This is the core, but of course a lot is determined by the problem at hand. Note that I shared some more thoughts on "general toolbox" in a [[/edu/or-tech-seminar/][dedicated seminar]] we run in early 2021, and some smaller notes are indexed in [[/notes/]["Misc notes"]] section.
